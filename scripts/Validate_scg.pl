#!/usr/bin/perl

=head1 NAME

Validate_markers.pl 
prints a table of counts of housekeeping genes in the different bins generated by CONCOCT.

=head1 USAGE

perl Validate_markers.pl -c ClusterFile -a AnnotationFile -m MarkerFile [OPTIONS]

=head1 POSITIONAL ARGUMENTS

-cCluster file generated by CONCOCT. A comma-separated file with contig id:s in the first and cluster (bin) id:s in the second column.

-aAnnotation file. A tab-separated file with contig id:s in the first and feature id:s (e.g. COG id:s) in the second column. A contig may appear on multiple lines.

-mMarker gene file. A file with marker feature id:s (e.g. COG:ids) in the first column. In the CONCOCT publication we used the file scg_cogs_min0.97_max1.03_unique_genera.txt

=head1 OPIONAL ARGUMENTS

-sIf the contig id:s in the first column of the annotation file have been concatenated with e.g. a number to indicate gene id, you can specify a separator character or string, in which case the string before the separator will be used as contig id. The character/string should be enclosed by "". To separate by space do -s "\s", by tab do -s "\t" and by punctuation do -s "\."  

-h Prints this help message.

=cut

use Getopt::Long;

$contig_to_cluster_file = undef;
$annotation_file = undef;
$marker_file = undef;
$contig_id_separator = undef;

GetOptions(
'c=s'=> \$contig_to_cluster_file,
'a=s'=> \$annotation_file,
'm=s'=> \$marker_file,
's=s'=> \$contig_id_separator,
'h|help'=> sub{system('perldoc', $0); exit;},
'e|ext:s'=>\$ext,
);

if ((! $contig_to_cluster_file) || (! $annotation_file) || (! $marker_file)) {
print "\nERROR: Missing required input.\nFor help using the script, type 'perl $0 -help'\n"; exit;
}

$use_refs = 0; # 1 for yes, 0 for no # only works if 
$read_to_contig_mapping_file = ""; # Needs to be set if $use_refs = 1;

#&read_coverage;
&read_marker_list;
&read_annotations;
&read_contig_to_cluster;
if ($use_refs == 0) { # default
&output;
} else {
&read_read_to_contig_mapping;
&output_with_refs;
}

sub read_marker_list {
$line = 0;
open (INFILE, "$marker_file") || die ("Can't open $marker_file");
while (<INFILE>) {
$line++;
$_ =~ s/\R//g;
     push (@markers, $_);
     }
     @markers = sort(@markers);
}

sub read_annotations {
$line = 0;
open (INFILE, "$annotation_file") || die ("Can't open $annotation_file");
while (<INFILE>) {
$line++;
next if ($line == 1);
$_ =~ s/\R//g;
@fields = split(/\t/, $_);
if ($contig_id_separator) {
#@subfields = split(/\./, $fields[0]);
@subfields = split(/$contig_id_separator/, $fields[0]);
pop(@subfields);
$contig = join($contig_id_separator,@subfields);
} else {
$contig = $fields[0];
}
$feature = $fields[1];
$contig_n_feature{$contig}{$feature}++;
#print"#$contig#$feature#\n";

# Or perhaps:
#$feature = $fields[2];
#$eval = $fields[3];
#if ($eval < 0.001) {
#$contig_n_feature{$contig}{$feature}++;
#}
}
}

sub read_read_to_contig_mapping {
$line = 0;
open (INFILE, "$read_to_contig_mapping_file") || die ("Can't open $read_to_contig_mapping_file");
while (<INFILE>) {
$line++;
$_ =~ s/\R//g;
#chomp;
@fields = split(/\t/, $_);
if ($line == 1) {
shift(@fields);
@genomes = @fields;
for ($i = 0; $i < @genomes; $i++) {
@subfields = split(/\|/, $genomes[$i]);
$genomes[$i] = $subfields[-1];
substr($genomes[$i], 0 ,1) = "";
}
} else {
$contig = $fields[0];
shift(@fields);
for ($i = 0; $i < @fields; $i++) {
$contig_n_genome{$contig}{$genomes[$i]} = $fields[$i];
#print"$contig\t$genomes[$i]\t$fields[$i]\n\n";
}
}
}
}

sub read_coverage {
$line = 0;
open (INFILE, "$coverage_file") || die ("Can't open $coverage_file");
while (<INFILE>) {
$line++;
$_ =~ s/\R//g;
#chomp;
#chop;
@fields = split(/\t/, $_);
if ($line == 1) {
@samples = grep { /cov_mean/ } @fields;
@cov_ix = grep { $fields[$_] =~ /cov_mean/ } 0..$#fields;
} else {
$contig = $fields[0];
#print"#$contig#\n";
$length = $fields[1];
$gc = $fields[2];
$contig_length{$contig} = $length;
$contig_gc{$contig} = $gc;
for ($i = 0; $i < @samples; $i++) {
$contig_n_sample_cov{$contig}{$samples[$i]} = $fields[$cov_ix[$i]];
}
}
}
}

sub read_contig_to_cluster {
$line = 0;
open (INFILE, "$contig_to_cluster_file") || die ("Can't open $contig_to_cluster_file");
while (<INFILE>) {
$line++;
$_ =~ s/\R//g;
@fields = split(/,/, $_);
$contig = $fields[0];
$cluster = $fields[1];
$cluster_n_contig{$cluster}{$contig} = 1;
#print"#$cluster#\t#$contig#\n";
}
}


sub output {
print"Cluster\tContigs\tNum_contigs";
#print"Cluster\tContigs\tNum_contigs\tSum_contigs\tGC_contigs";
#for ($i = 0; $i < @samples; $i++) {
#print"\t$samples[$i]";
#}
for ($i = 0; $i < @markers; $i++) {
print"\t$markers[$i]";
}
print"\n";

@clusters = (keys %cluster_n_contig);
@clusters = sort @clusters;
foreach $cluster (@clusters) {
print"$cluster";

# print contigs in cluster
$temp = join('|', (keys %{$cluster_n_contig{$cluster}}) );
print"\t$temp";

# print number of contigs in cluster
$temp = (keys %{$cluster_n_contig{$cluster}});
print"\t$temp";

## print Sum_contigs
#$temp = 0;
#foreach $contig (keys %{$cluster_n_contig{$cluster}}) {
#$temp = $temp + $contig_length{$contig};
#}
#print"\t$temp";

## print mean GC_contigs
#$temp = 0;
#foreach $contig (keys %{$cluster_n_contig{$cluster}}) {
#$temp = $temp + $contig_gc{$contig};
#}
#$temp = $temp/(keys %{$cluster_n_contig{$cluster}});
#print"\t$temp";

## print mean coverages
#for ($i = 0; $i < @samples; $i++) {
#$temp = 0;
#foreach $contig (keys %{$cluster_n_contig{$cluster}}) {
#$temp = $temp + $contig_n_sample_cov{$contig}{$samples[$i]};
#}
#$temp = $temp/(keys %{$cluster_n_contig{$cluster}});
#print"\t$temp";
#}

# print counts of marker genes
for ($i = 0; $i < @markers; $i++) {
$counts = 0;
foreach $contig (keys %{$cluster_n_contig{$cluster}}) {
foreach $feature (keys %{$contig_n_feature{$contig}}) {
if ($feature eq $markers[$i]) {
#$counts = $counts + $contig_n_feature{$contig}{$feature};
$counts++; # will just count a feature once per contig
}
}
}
print"\t$counts";
}
print"\n";
}
}

sub output_with_refs {
print"Cluster\tContigs\tNum_contigs\tSum_contigs\tGC_contigs";
for ($i = 0; $i < @samples; $i++) {
print"\t$samples[$i]";
}

@genomes = sort @genomes;
for ($i = 0; $i < @genomes; $i++) {
print"\t$genomes[$i]";
}

for ($i = 0; $i < @markers; $i++) {
print"\t$markers[$i]";
}
print"\n";

@clusters = (keys %cluster_n_contig);
@clusters = sort @clusters;
foreach $cluster (@clusters) {
print"$cluster";

# print contigs in cluster
$temp = join('|', (keys %{$cluster_n_contig{$cluster}}) );
print"\t$temp";

# print numner of contigs in cluster
$temp = (keys %{$cluster_n_contig{$cluster}});
print"\t$temp";

# print Sum_contigs
$temp = 0;
foreach $contig (keys %{$cluster_n_contig{$cluster}}) {
$temp = $temp + $contig_length{$contig};
}
print"\t$temp";

# print mean GC_contigs
$temp = 0;
foreach $contig (keys %{$cluster_n_contig{$cluster}}) {
$temp = $temp + $contig_gc{$contig};
}
$temp = $temp/(keys %{$cluster_n_contig{$cluster}});
print"\t$temp";

# print mean coverages
for ($i = 0; $i < @samples; $i++) {
$temp = 0;
foreach $contig (keys %{$cluster_n_contig{$cluster}}) {
$temp = $temp + $contig_n_sample_cov{$contig}{$samples[$i]};
}
$temp = $temp/(keys %{$cluster_n_contig{$cluster}});
print"\t$temp";
}

# print number of reads per genome
for ($i = 0; $i < @genomes; $i++) {
$counts = 0;
foreach $contig (keys %{$cluster_n_contig{$cluster}}) {
$counts = $counts + $contig_n_genome{$contig}{$genomes[$i]};
}
print"\t$counts";
}

# print counts of marker genes
for ($i = 0; $i < @markers; $i++) {
$counts = 0;
foreach $contig (keys %{$cluster_n_contig{$cluster}}) {
foreach $feature (keys %{$contig_n_feature{$contig}}) {
if ($feature eq $markers[$i]) {
#$counts = $counts + $contig_n_feature{$contig}{$feature};
$counts++; # will just count a feature once per contig
}
}
}
print"\t$counts";
}
print"\n";
}
}

